- name: Wait for bootstrap to complete
  command: "{{ cluster_data_dir }}/bin/openshift-install --dir={{ cluster_data_dir }}/install-dir agent wait-for bootstrap-complete --log-level debug" # noqa 301
  retries: 180
  delay: 10
  register: result_bootstrap
  until: result_bootstrap.rc == 0

- name: Set count of all nodes
  set_fact:
    nodes_count: "{{ nodes | dict2items | map(attribute='value') | map('length') | sum }}"

- name: Approve csrs for new  until we have a total of {{ nodes_count }} nodes
  environment:
    KUBECONFIG: "{{ cluster_data_dir }}/install-dir/auth/kubeconfig"
  shell: |
    oc get csr -o name | xargs oc adm certificate approve > /dev/null 2>&1
    oc get nodes | grep -w Ready | wc -l
  register: result
  until: (result.stdout | int) == (nodes_count | int)
  retries: 150
  delay: 10
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying:  {{ result.stdout }}/{{ nodes_count }} nodes READY. ({{ retries_left }} Retries left) condition: {{ (result.stdout | int) == (nodes_count | int) }}...


- name: Setup Infra nodes
  when: nodes.infra is defined and nodes.infra | length > 0
  block:
    - name: Check for infra nodes and label accordingly
      environment:
       KUBECONFIG: "{{ cluster_data_dir }}/install-dir/auth/kubeconfig"
      k8s:
       state: patched
       merge_type: merge
       definition:
         apiVersion: v1
         kind: Node
         metadata:
           name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
           labels:
             node-role.kubernetes.io/infra: ""
      loop: "{{ nodes.infra }}"
    
    - name: Change ingress controller node selector
      environment:
       KUBECONFIG: "{{ cluster_data_dir }}/install-dir/auth/kubeconfig"
      k8s:
       state: patched
       merge_type: merge
       definition:
         apiVersion: "operator.openshift.io/v1"
         kind: IngressController
         metadata:
           name: default
           namespace: openshift-ingress-operator
         spec:
          nodePlacement:
            nodeSelector:
              matchLabels:
                node-role.kubernetes.io/infra: ""
          tolerations:
          - effect: NoSchedule
            operator: Exists

- name: Wait for install complete
  command: "{{ cluster_data_dir }}/bin/openshift-install agent wait-for install-complete --dir={{ cluster_data_dir }}/install-dir --log-level debug" # noqa 301
  register: result_complete
  until: result_complete.rc == 0
  retries: 3
  delay: 5

- name: Output results from openshift-install wait-for install-complete
  debug:
   msg: "{{ result_complete.stderr | regex_findall('level=info.*') | list }}"

- name: Finalize Airgap Configuration
  when: registry is defined and registry.disconnected is defined and registry.disconnected == true
  environment:
    KUBECONFIG: "{{ cluster_data_dir }}/install-dir/auth/kubeconfig"
  block:
    - name: Patch OperatorHub to disable all default sources
      kubernetes.core.k8s:
            api_version: config.openshift.io/v1
            kind: OperatorHub
            name: cluster
            namespace: ""
            definition:
              spec:
                disableAllDefaultSources: true
            state: patched
    
    - name: Get OpenShift cluster version
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: ClusterVersion
      register: cluster_version_info

    - name: Extract major.minor version
      set_fact:
        ocp_major_version: "{{ cluster_version_info.resources[0].status.desired.version.split('.')[:2] | join('.') }}"

    - name: Display Openshift version
      debug:
        msg: "OpenShift major version is {{ ocp_major_version }}"
    
    - name: Create CatalogSources "{{ item }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: "{{ item }}"
            namespace: openshift-marketplace
          spec:
            image: "{{ registry.url }}/registry.redhat.io/redhat/{{ item }}-index:v{{ ocp_major_version }}"
            sourceType: grpc
      loop:
        - certified-operator
        - redhat-operator
        
    - name: Wait for CatalogSources to be Ready
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: CatalogSource
        name: "{{ item }}"
        namespace: openshift-marketplace 
      register: cs
      retries: 60
      delay: 5
      until: >
        cs.resources
        and cs.resources[0].status.connectionState.lastObservedState is defined
        and cs.resources[0].status.connectionState.lastObservedState == "READY"
      loop:
        - certified-operator
        - redhat-operator
